// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=IsAInstruction);
    Not(in=IsAInstruction, out=IsCInstruction);

    // instruction[15] is control bit.
    Mux16(a=instruction, b=ALUOutput, sel=instruction[15], out=ARegisterInput);       
    
    Or(a=IsAInstruction, b=instruction[5], out=LoadARegister);
    ARegister(in=ARegisterInput, load=LoadARegister, out=A, out[0..14]=addressM);

    And(a=IsCInstruction, b=instruction[4], out=LoadDRegister);
    DRegister(in=ALUOutput, load=LoadDRegister, out=D);

    Mux16(a=A, b=inM, sel=instruction[12], out=ALUInput);

    ALU(x=D, y=ALUInput, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUOutput, zr=ALUZero, ng=ALUNegative);

    And16(a=ALUOutput, b=true, out=outM);
    And(a=IsCInstruction, b=instruction[3], out=writeM);

    Not(in=ALUZero, out=NotALUZero);
    Not(in=ALUNegative, out=NotALUNegative);
    And(a=NotALUZero, b=NotALUNegative, out=ALUPositive);
    
    And(a=instruction[0], b=ALUPositive, out=JMPPositive);
    And(a=instruction[1], b=ALUZero, out=JMPZero);
    And(a=instruction[2], b=ALUNegative, out=JMPNegative);
    Or(a=JMPPositive, b=JMPZero, out=JMPZeroPositive);
    Or(a=JMPZeroPositive, b=JMPNegative, out=ALUJMP);
    And(a=ALUJMP, b=IsCInstruction, out=LoadPC);

    PC(in=A, load=LoadPC, inc=true, reset=reset, out[0..14]=pc);
}